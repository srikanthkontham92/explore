on:
  schedule:
    # From Monday to Friday at 6:00 AM
    - cron: "0 6 * * 1-5"
  workflow_dispatch:
    inputs:
      actions:
        description: "Action Options"
        default: "all"
        type: choice
        options:
          - terraform
          - docker-image
          - kustomize
          - all
      option:
        description: "Terraform option"
        default: "apply"
        type: choice
        options:
          - plan
          - apply
          - destroy
      environment:
        description: "Environment to deploy applications to"
        default: "qa"
        type: choice
        options:
          - dev
          - qa

permissions: 
  id-token: write
  contents: read

# env:
#   CLUSTER_NAME: "aks-lgtm-${{ github.event.inputs.environment }}"
#   RESOURCE_GROUP: "${{ vars.RESOURCE_GROUP }}"

jobs:
  terraform-execute:
    name: Provision Infrastructure
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.actions == 'terraform' || github.event.inputs.actions == 'all' }}
    # env:
    #   ARM_TENANT_ID : ${{ vars.AZURE_TENANT_ID }}
    #   ARM_SUBSCRIPTION_ID : ${{ vars.AZURE_SUBSCRIPTION_ID }}
    #   ARM_CLIENT_ID : ${{ vars.AZURE_MI_CLIENT_ID }}
    #   TF_VERSION: 1.7.4
    #   RESOURCE_GROUP: ${{ vars.TF_RESOURCE_GROUP }}
    #   STORAGE_ACCOUNT: ${{ vars.TF_STORAGE_ACCOUNT }}
    #   STORAGE_SECRET: ${{ secrets.TF_STORAGE_SECRET }}
    #   CONTAINER_NAME: ${{ vars.TF_CONTAINER_NAME }}
    #   STATE_KEY: ${{ vars.TF_STATE_KEY }}
    #   GIT_TOKEN: ${{ secrets.GH_TOKEN }}
    #   GITRUNNER_TOKEN: ${{ secrets.RUNNER_REGISTRATION_TOKEN }}
    # outputs:
    #   ACR_REPO: ${{ steps.tf-output.outputs.ACR_REPO }}
    #   ACR_USER: ${{ steps.tf-output.outputs.ACR_USER }}
    #   ACR_PASS: ${{ steps.tf-output.outputs.ACR_PASSWORD }}
    #   POSTGRES_PASSWORD: ${{ steps.tf-output.outputs.POSTGRES_PASSWORD }}
    #   public_ip_address: ${{ steps.tf-output.outputs.public_ip_address }}
    #   POSTGRES_FQDN: ${{ steps.tf-output.outputs.POSTGRES_FQDN }}
    #   COSMOSDB_ACCESSKEY: ${{ steps.tf-output.outputs.COSMOSDB_ACCESSKEY }}
    #   COSMOSDB_URI: ${{ steps.tf-output.outputs.COSMOSDB_URI }}

    # defaults:
    #   run:
    #     shell: bash
    #     working-directory: infra
    # environment: "${{ github.event.inputs.environment }}"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false
      
      # - name: 'Authenticate to Azure'
      #   uses: azure/login@v1
      #   with:
      #     client-id: ${{ env.ARM_CLIENT_ID }}
      #     tenant-id: ${{ env.ARM_TENANT_ID }}
      #     subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}
  
      - name: Terraform init
        id: init
        run: terraform init -backend-config="resource_group_name=${{ env.RESOURCE_GROUP }}" -backend-config="storage_account_name=${{ env.STORAGE_ACCOUNT }}" -backend-config="container_name=${{env.CONTAINER_NAME}}" -backend-config="key=${{env.STATE_KEY}}" -backend-config="access_key=${{env.STORAGE_SECRET}}"

      - name: Terraform plan
        id: tf-plan
        if: "${{ github.event.inputs.option == 'plan' }}"
        # run: terraform ${{ github.event.inputs.option }} --var-file=${{ github.event.inputs.environment }}.tfvars -var="runner_token=${{env.GITRUNNER_TOKEN}}" -no-color -input=false
  
      - name: Terraform ${{ github.event.inputs.option }}
        id: tf-execute
        if: "${{ github.event.inputs.option == 'apply' || github.event.inputs.option == 'destroy' }}"
        # run: terraform ${{ github.event.inputs.option }} --var-file=${{ github.event.inputs.environment }}.tfvars -var="runner_token=${{env.GITRUNNER_TOKEN}}" -auto-approve -input=false

      # - name: Terraform output
      #   id: tf-output
      #   if: "${{ github.event.inputs.option == 'apply' }}"
      #   run: |
      #     repo=$(terraform output -raw acr_login_server)
      #     user=$(terraform output -raw acr_admin_username)
      #     public_ip=$(terraform output -raw public_ip_address)
      #     postgres_password=$(terraform output -raw db_password)
      #     cosmosdb_accesskey=$(terraform output -raw cosmosdb_accesskey)
      #     cosmosdb_uri=$(terraform output -raw cosmosdb_uri)
      #     POSTGRES_FQDN_tf=$(terraform output -raw postgres_fqdn)

      #     echo "ACR_REPO=$repo" >> "$GITHUB_OUTPUT"
      #     echo "ACR_USER=$user" >> "$GITHUB_OUTPUT"
      #     echo "POSTGRES_PASSWORD=$postgres_password" >> "$GITHUB_OUTPUT"
      #     echo "COSMOSDB_ACCESSKEY=$(echo -n $cosmosdb_accesskey | base64 -w 0)" >> "$GITHUB_OUTPUT"
      #     echo "COSMOSDB_URI=$cosmosdb_uri" >> "$GITHUB_OUTPUT"
      #     echo "POSTGRES_FQDN=$POSTGRES_FQDN_tf" >> "$GITHUB_OUTPUT"
      #     echo "public_ip_address=$public_ip" >> "$GITHUB_OUTPUT"
      #     echo $GITHUB_OUTPUT

  setup-env:
    name: Setup Environment
    runs-on: ubuntu-latest
    if: "${{ github.event.inputs.actions == 'all' }}"
    needs: terraform-execute
    steps:
      - uses: actions/checkout@v4
      - name: Run setup script
        run: ./scripts/setup-env.sh

  create-app-secrets:
    name: Create Application Secrets
    runs-on: ubuntu-latest
    if: "${{ github.event.inputs.actions == 'all' }}"
    needs: setup-env
    steps:
      - uses: actions/checkout@v4
      - name: Create secrets for apps
        run: ./scripts/create-app-secrets.sh

  create-grafana-secrets:
    name: Create Grafana Secrets
    runs-on: ubuntu-latest
    if: "${{ github.event.inputs.actions == 'all' }}"
    needs: setup-env
    steps:
      - uses: actions/checkout@v4
      - name: Create Grafana secrets
        run: ./scripts/create-grafana-secrets.sh

  deploy-argocd:
    name: Deploy ArgoCD
    runs-on: ubuntu-latest
    if: "${{ github.event.inputs.actions == 'all' }}"
    needs: [setup-env, create-app-secrets, create-grafana-secrets]
    steps:
      - uses: actions/checkout@v4
      - name: Deploy ArgoCD
        run: ./scripts/deploy-argocd.sh

  publish-images:
    name: "Publish Docker Images"
    runs-on: ubuntu-latest
    needs: terraform-execute
    if: "${{ github.event.inputs.actions == 'docker-image' || github.event.inputs.actions == 'all' }}"
    environment: "${{ github.event.inputs.environment }}"
    steps:
      - uses: actions/checkout@v4
      - id: publish-docker-images
        uses: ./.github/actions/publish-docker-images
        with:
          client-id: ${{vars.AZURE_MI_CLIENT_ID}}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}
          resource-group: ${{ env.RESOURCE_GROUP }}

  deploy-kustomize:
    name: "Deploy Kustomize"
    runs-on: ubuntu-latest
    if: "${{ github.event.inputs.actions == 'kustomize' || github.event.inputs.actions == 'all' }}"
    environment: "${{ github.event.inputs.environment }}"
    needs: [terraform-execute, publish-images, setup-env]
    env:
      KUSTOMIZE_VERSION: 4.5.7
      MIMIR_AZURE_USER_ID: ${{ needs.setup-env.outputs.kubelet_identity }}
      LOKI_AZURE_USER_ID:  ${{ needs.setup-env.outputs.kubelet_identity }}
      TEMPO_AZURE_USER_ID: ${{ needs.setup-env.outputs.kubelet_identity }}
      ENTRYPOINT_CERT: ${{ secrets.ENTRYPOINT_CERT }}
      ENTRYPOINT_PRIVATE_KEY: ${{ secrets.ENTRYPOINT_PRIVATE_KEY }}
      INTERNAL_AUTH_TOKEN: ${{ secrets.OTELC_INTERNAL_USER }}
      SELF_MONITORING_AUTH_TOKEN: ${{ secrets.OTELC_MONITORING_USER }}
      COSMOS_DB_KEY: ${{ secrets.COSMOS_DB_KEY }}
      PUBLIC_IP_ADDRESS: ${{ needs.terraform-execute.outputs.public_ip_address }}

    steps:
      - uses: actions/checkout@v4
  
      - id: aks-connect
        uses: ./.github/actions/aks-connect
        with:
          client-id: ${{ vars.AZURE_MI_CLIENT_ID }}
          subscription-id: ${{ vars.AZURE
